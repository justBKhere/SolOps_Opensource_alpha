const solanaWeb3 = require('@solana/web3.js');
const config = require('../utils/config');
const { getConnection } = require('./solanaConnectionService');
const TOKEN_PROGRAM_ID = require('@solana/spl-token').TOKEN_PROGRAM_ID;

let solanaEndpoint = config.devnetEndpoint; // Default to Devnet endpoint

async function getTokenBalance(walletAddress, tokenAddress) {
    try {
        // Connect to the Solana network using the specified endpoint
        const connection = getConnection();

        // Retrieve the token account associated with the wallet address
        const publicKey = new solanaWeb3.PublicKey(walletAddress);
        const tokenAccounts = await connection.getParsedTokenAccountsByOwner(publicKey, {
            programId: new solanaWeb3.PublicKey(tokenAddress),
        });

        // Extract the token balance from the account information
        const tokenBalance = tokenAccounts.value.reduce((balance, account) => {
            return balance + account.account.data.parsed.info.tokenAmount.uiAmount;
        }, 0);

        // Return the token balance
        return {
            success: true,
            balance: tokenBalance,
        };
    } catch (error) {
        console.error('Error fetching token balance:', error.message);
        return {
            success: false,
            error: 'Failed to fetch token balance',
        };
    }
}

async function getTransactionHistory(walletAddress) {
    try {
        // Connect to the Solana network using the specified endpoint
        const connection = getConnection();

        // Get transaction history for the wallet address
        const publicKey = new solanaWeb3.PublicKey(walletAddress);
        const transactionHistory = await connection.getConfirmedSignaturesForAddress2(publicKey);

        // Return the transaction history
        return {
            success: true,
            history: transactionHistory,
        };
    } catch (error) {
        console.error('Error fetching transaction history:', error.message);
        return {
            success: false,
            error: 'Failed to fetch transaction history',
        };
    }
}

async function getTokenTransactionHistory(walletAddress, tokenAddress) {
    try {
        // Connect to the Solana network using the specified endpoint
        const connection = getConnection();

        // Retrieve the token account associated with the wallet address
        const publicKey = new solanaWeb3.PublicKey(walletAddress);
        const tokenAccounts = await connection.getParsedTokenAccountsByOwner(publicKey, {
            programId: new solanaWeb3.PublicKey(tokenAddress),
        });

        if (tokenAccounts.value.length === 0) {
            return {
                success: false,
                error: 'No token accounts found for the provided wallet address',
            };
        }

        // Retrieve the transaction history for the token account
        const tokenHistory = await connection.getTokenAccountTransactionHistory(
            new solanaWeb3.PublicKey(tokenAccounts.value[0].pubkey),
            {
                commitment: 'confirmed',
            }
        );

        // Return the token transaction history
        return {
            success: true,
            history: tokenHistory,
        };
    } catch (error) {
        console.error('Error fetching token transaction history:', error.message);
        return {
            success: false,
            error: 'Failed to fetch token transaction history',
        };
    }
}

module.exports = {
    getTokenBalance,
    getTransactionHistory,
    getTokenTransactionHistory,
};
